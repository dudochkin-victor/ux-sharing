/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -i meegouxsharingdbustypes.h -p ../interfaces/meego-ux-sharing-service_interface.h:../interfaces/meego-ux-sharing-service_interface.cpp ../interfaces/meego-ux-sharing-service.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MEEGO_UX_SHARING_SERVICE_INTERFACE_H_1367652591
#define MEEGO_UX_SHARING_SERVICE_INTERFACE_H_1367652591

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "meegouxsharingdbustypes.h"

/*
 * Proxy class for interface com.meego.ux.sharing.service
 */
class ComMeegoUxSharingServiceInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.meego.ux.sharing.service"; }

public:
    ComMeegoUxSharingServiceInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComMeegoUxSharingServiceInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> CanShareType(const QString &sharetype)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(sharetype);
        return asyncCallWithArgumentList(QLatin1String("CanShareType"), argumentList);
    }

    inline QDBusPendingReply<uint> GetCredsState()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetCredsState"), argumentList);
    }

    inline QDBusPendingReply<QString> GetDisplayName()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetDisplayName"), argumentList);
    }

    inline QDBusPendingReply<QString> GetIconPath()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetIconPath"), argumentList);
    }

    inline QDBusPendingReply<bool> GetServiceAvailable()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetServiceAvailable"), argumentList);
    }

    inline QDBusPendingReply<QString> GetServiceDesc()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetServiceDesc"), argumentList);
    }

    inline QDBusPendingReply<QString> GetServiceName()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetServiceName"), argumentList);
    }

    inline QDBusPendingReply<QString> GetServiceStateText()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetServiceStateText"), argumentList);
    }

    inline QDBusPendingReply<QString> GetServiceType()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetServiceType"), argumentList);
    }

    inline QDBusPendingReply<QString> GetSettingsURI(const QString &platform, const QString &product)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(platform) << QVariant::fromValue(product);
        return asyncCallWithArgumentList(QLatin1String("GetSettingsURI"), argumentList);
    }

    inline QDBusPendingReply<QString> GetUIName(const QString &widgettype, const QString &platform, const QString &product, const QString &sharetype, uint sharecount)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(widgettype) << QVariant::fromValue(platform) << QVariant::fromValue(product) << QVariant::fromValue(sharetype) << QVariant::fromValue(sharecount);
        return asyncCallWithArgumentList(QLatin1String("GetUIName"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void ServiceChanged(const QString &service);
};

#endif
