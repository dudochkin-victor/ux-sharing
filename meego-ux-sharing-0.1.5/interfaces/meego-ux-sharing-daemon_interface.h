/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -i meegouxsharingdbustypes.h -p ../interfaces/meego-ux-sharing-daemon_interface.h:../interfaces/meego-ux-sharing-daemon_interface.cpp ../interfaces/meego-ux-sharing-daemon.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef MEEGO_UX_SHARING_DAEMON_INTERFACE_H_1367652591
#define MEEGO_UX_SHARING_DAEMON_INTERFACE_H_1367652591

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "meegouxsharingdbustypes.h"

/*
 * Proxy class for interface com.meego.ux.sharing
 */
class ComMeegoUxSharingInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.meego.ux.sharing"; }

public:
    ComMeegoUxSharingInterface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~ComMeegoUxSharingInterface();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<bool> CancelShare(int opid)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(opid);
        return asyncCallWithArgumentList(QLatin1String("CancelShare"), argumentList);
    }

    inline QDBusPendingReply<QStringList> GetAllServices()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetAllServices"), argumentList);
    }

    inline QDBusPendingReply<QStringList> GetServicesForType(const QString &type)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(type);
        return asyncCallWithArgumentList(QLatin1String("GetServicesForType"), argumentList);
    }

    inline QDBusPendingReply<> RescanPlugins()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("RescanPlugins"), argumentList);
    }

    inline QDBusPendingReply<int, QString> Share(const QString &service, const QString &sharetype, ArrayOfShareItemStruct items)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(service) << QVariant::fromValue(sharetype) << QVariant::fromValue(items);
        return asyncCallWithArgumentList(QLatin1String("Share"), argumentList);
    }
    inline QDBusReply<int> Share(const QString &service, const QString &sharetype, ArrayOfShareItemStruct items, QString &errmessage)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(service) << QVariant::fromValue(sharetype) << QVariant::fromValue(items);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QLatin1String("Share"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            errmessage = qdbus_cast<QString>(reply.arguments().at(1));
        }
        return reply;
    }

Q_SIGNALS: // SIGNALS
    void ServiceAdded(const QString &name, const QString &type);
    void ServiceRemoved(const QString &name, const QString &type);
    void ShareProgress(const QString &service, int opid, int progress, const QString &message);
};

#endif
