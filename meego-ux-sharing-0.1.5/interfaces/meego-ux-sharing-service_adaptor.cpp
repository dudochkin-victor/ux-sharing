/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -N -i meegouxsharingdbustypes.h -a ../interfaces/meego-ux-sharing-service_adaptor.h:../interfaces/meego-ux-sharing-service_adaptor.cpp ../interfaces/meego-ux-sharing-service.xml
 *
 * qdbusxml2cpp is Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "../interfaces/meego-ux-sharing-service_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class ServiceAdaptor
 */

ServiceAdaptor::ServiceAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ServiceAdaptor::~ServiceAdaptor()
{
    // destructor
}

bool ServiceAdaptor::CanShareType(const QString &sharetype)
{
    // handle method call com.meego.ux.sharing.service.CanShareType
    bool canshare;
    QMetaObject::invokeMethod(parent(), "CanShareType", Q_RETURN_ARG(bool, canshare), Q_ARG(QString, sharetype));
    return canshare;
}

uint ServiceAdaptor::GetCredsState()
{
    // handle method call com.meego.ux.sharing.service.GetCredsState
    uint state;
    QMetaObject::invokeMethod(parent(), "GetCredsState", Q_RETURN_ARG(uint, state));
    return state;
}

QString ServiceAdaptor::GetDisplayName()
{
    // handle method call com.meego.ux.sharing.service.GetDisplayName
    QString displayname;
    QMetaObject::invokeMethod(parent(), "GetDisplayName", Q_RETURN_ARG(QString, displayname));
    return displayname;
}

QString ServiceAdaptor::GetIconPath()
{
    // handle method call com.meego.ux.sharing.service.GetIconPath
    QString path;
    QMetaObject::invokeMethod(parent(), "GetIconPath", Q_RETURN_ARG(QString, path));
    return path;
}

bool ServiceAdaptor::GetServiceAvailable()
{
    // handle method call com.meego.ux.sharing.service.GetServiceAvailable
    bool avail;
    QMetaObject::invokeMethod(parent(), "GetServiceAvailable", Q_RETURN_ARG(bool, avail));
    return avail;
}

QString ServiceAdaptor::GetServiceDesc()
{
    // handle method call com.meego.ux.sharing.service.GetServiceDesc
    QString desc;
    QMetaObject::invokeMethod(parent(), "GetServiceDesc", Q_RETURN_ARG(QString, desc));
    return desc;
}

QString ServiceAdaptor::GetServiceName()
{
    // handle method call com.meego.ux.sharing.service.GetServiceName
    QString servicename;
    QMetaObject::invokeMethod(parent(), "GetServiceName", Q_RETURN_ARG(QString, servicename));
    return servicename;
}

QString ServiceAdaptor::GetServiceStateText()
{
    // handle method call com.meego.ux.sharing.service.GetServiceStateText
    QString text;
    QMetaObject::invokeMethod(parent(), "GetServiceStateText", Q_RETURN_ARG(QString, text));
    return text;
}

QString ServiceAdaptor::GetServiceType()
{
    // handle method call com.meego.ux.sharing.service.GetServiceType
    QString servicetype;
    QMetaObject::invokeMethod(parent(), "GetServiceType", Q_RETURN_ARG(QString, servicetype));
    return servicetype;
}

QString ServiceAdaptor::GetSettingsURI(const QString &platform, const QString &product)
{
    // handle method call com.meego.ux.sharing.service.GetSettingsURI
    QString settingsuri;
    QMetaObject::invokeMethod(parent(), "GetSettingsURI", Q_RETURN_ARG(QString, settingsuri), Q_ARG(QString, platform), Q_ARG(QString, product));
    return settingsuri;
}

QString ServiceAdaptor::GetUIName(const QString &widgettype, const QString &platform, const QString &product, const QString &sharetype, uint sharecount)
{
    // handle method call com.meego.ux.sharing.service.GetUIName
    QString uiname;
    QMetaObject::invokeMethod(parent(), "GetUIName", Q_RETURN_ARG(QString, uiname), Q_ARG(QString, widgettype), Q_ARG(QString, platform), Q_ARG(QString, product), Q_ARG(QString, sharetype), Q_ARG(uint, sharecount));
    return uiname;
}

